object HelloMapTuple {
  
  def main(args: Array[String]): Unit = {
    
    /**
     *  val v = Map() -->  该方式创建的Map value不可进行更改
     *  val v2 = scala.collection.mutable.Map() -->  该方式创建的Map value可以进行更改
     *  
     *  val v3 = new scala.collection.mutable.HashMap[String,Int]   --> (new HashMap)；创建一个空值的HashMap，value可以进行更改
     *  v3 += ("Zhangsan" -> 22,"Lisi" -> 23)   -->  给HashMap写入键值对
     *	v3 -= ("Zhangsan")   -->   删除HashMap中的键值对
     * 
     * Map的赋值方式① ：val v = Map(key -> value,key1 -> value1)
	   * Map的赋值方式② ：val v1 = Map((key,value))
	   * 
	   * 读取Map值的方式①：for((key,value) <- MapName)
     */
   
    val v = Map("Zhangsan" -> 6,"Lisi" -> 20)
    val v1 = Map(("Mr.Yao","I love you"))
    //循环v的值
    for((name,age) <- v) println("My name is " + name + ",age is " + age)
    
     //循环v1的值
    for((name,s) <- v1) println("I'm is " + name + ",I want to you say " + s + "!")
    
    println("\r" + "--------------------------以上Map-----------------------------" + "\r")
    
    //创建一个可以更改value的HashMap
    val v2 = scala.collection.mutable.Map("Wangwu" -> 15)
    v2 += ("zhaosi" -> 10)
    for((name,age) <- v2) println("My name is " + name + ",age is " + age)
    
    //创建HashMap，需要使用   -->   new scala.collection.mutable.HashMap[String,Int]
    val v3 = new scala.collection.mutable.HashMap[String,Int]
    //给HashMap(v3)添加内容
    v3 += ("Zhangsan" -> 22,"Lisi" -> 23)
    // 通过HashMap的Key来删除HashMap的value --> v3 -= ("Zhangsan")
    //增强for循环遍历HashMap中的key和value
   for((name,age) <- v3) println("v3   -->   My name is " + name + ",age is " + age)
   
   println("\r" + "----------------------以上HashMap---------------------------------" + "\r")
   
   //值遍历出Map中的key,使用 “.keySet”方法
   for(key <- v3.keySet) println("HashMap Key " + "'" + key + "'")
   
   println("\r" + "--------------------以上获取Mao的key-----------------------------------" + "\r")
   
   //遍历出Map中的Value，使用“.values”方法
   for(value <- v3.values) println("HashMap value " + "'" + value + "'")
   
   println("\r" + "--------------------以上获取Map的value-----------------------------------" + "\r")
   
   /**
    *   1.yield作用：循环遍历的值会被yield给保存，当整个for循环结束后yield自动生成一个新的集合，新集合的类型和原被for循环遍历的类型是同一个类型；
    *   	下面这句：循环遍历这个map，并把值以(age，name)的方式保存为一个新的集合，然后把这个集合赋值给 result。
    * 
    * 	2.重新遍历上面新保存的集合，从打印的结果中可以看到，“name”和“age”的值互换了
    *	 		name：23 , age：Lisi
		*			name：22 , age：Zhangsan
    */
   val result = for ((name,age) <- v3) yield(age,name)
   for((name,age) <- result) println("name：" + name + " , " + "age：" + age)
   
   println("\r" + "------------------------以上yield-------------------------------" + "\r")
   
   /**
    * SortedMap
    *   1.给Map中的值按字典顺序进行排序，使用：scala.collection.immutable.SortedMap((key,value));
    *   2.要想使HashMap中的内容按输入顺序输出，使用：new scala.collection.mutable.LinkedHashMap[key类型,value类型]。
    *   
    * Tuple
    *   1.Tuple相当于是一个用来存放多个值的组合，里面可以存放的个数最多是22个，超过22个元素会报错;
    *   2.当方法想返回多个值，但又不想重新定义一个类，这时就可以使用Tuple。
    */
   val v4 = scala.collection.immutable.SortedMap("down" -> 6,"admin" -> 20)
   for((name,age) <- v4) println("SortedMap排序后的输出--> " +"name :" + name + " , " + "age:" + age)
   
   println("\r" + "--------------------以上SortedMap-----------------------------------" + "\r")
   
   //创建LikedHashMap
   val v5 = new scala.collection.mutable.LinkedHashMap[String,Int]
    //创建HashMap
   val v6 = new scala.collection.mutable.HashMap[String,Int]
    //给LinkedHashMap和HashMap进行赋值
    v5 += ("B" -> 10,"A" -> 11,"cc" -> 12,"c" -> 13)
    v6 += ("B" -> 10,"A" -> 11,"cc" -> 12,"c" -> 13)
    //循环遍历LinkedHashMap和HashMap，并在控制台打印LinkedHashMap和HashMap的内容；HashMap输出的内容不按顺序输出，而LinkedHashMap是按内容存在的顺序输出的
    for((name,age) <- v5)println("LikendHashMap：" + name + " " + age)
    for((name,age) <- v6)println("HashMap：" + name + " " + age)
    
    println("\r" + "-----------------------以上LinkedMap--------------------------------" + "\r")
    
    //下面就是一个Tuple，可以存放各种不同类型的元素
    val t = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)
    println(t._22)
    
    println("\r" + "-----------------------以上Tuple--------------------------------" + "\r")
  }
}
